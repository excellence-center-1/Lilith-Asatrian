{"name": "Update greenhouse with invalid credentials", "status": "skipped", "statusDetails": {"message": "XFAIL reason: [NOTRUN] \n\n_pytest.outcomes.XFailed: [NOTRUN]", "trace": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x7fd27ab1f400>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n../../.local/lib/python3.10/site-packages/_pytest/runner.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../.local/lib/python3.10/site-packages/_pytest/runner.py:262: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n../../.local/lib/python3.10/site-packages/pluggy/_hooks.py:493: in __call__\n    return self._hookexec(self.name, self._hookimpls, kwargs, firstresult)\n../../.local/lib/python3.10/site-packages/pluggy/_manager.py:115: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_update_greenhouse_with_invalid_credentials[Invalid name 2--5]>\n\n    @hookimpl(tryfirst=True)\n    def pytest_runtest_setup(item: Item) -> None:\n        skipped = evaluate_skip_marks(item)\n        if skipped:\n            raise skip.Exception(skipped.reason, _use_item_location=True)\n    \n        item.stash[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n        if xfailed and not item.config.option.runxfail and not xfailed.run:\n>           xfail(\"[NOTRUN] \" + xfailed.reason)\nE           _pytest.outcomes.XFailed: [NOTRUN]\n\n../../.local/lib/python3.10/site-packages/_pytest/skipping.py:243: XFailed"}, "parameters": [{"name": "name", "value": "'Invalid name 2'"}, {"name": "size", "value": "-5"}], "start": 1705658638076, "stop": 1705658638076, "uuid": "f6c95428-01dd-4def-830a-bbc274d57c10", "historyId": "ad66ce15ef7ddb1f2d5028af804d728c", "testCaseId": "76187c2e90d29ed9c671f853118c2bbf", "fullName": "test_owner_greenhouses.TestUpdateGreenhouse#test_update_greenhouse_with_invalid_credentials", "labels": [{"name": "tag", "value": "put"}, {"name": "tag", "value": "invalid_input"}, {"name": "tag", "value": "@pytest.mark.xfail(run=False)"}, {"name": "tag", "value": "api"}, {"name": "suite", "value": "test_owner_greenhouses"}, {"name": "subSuite", "value": "TestUpdateGreenhouse"}, {"name": "host", "value": "lilit-HP-Laptop-15-dw1xxx"}, {"name": "thread", "value": "23063-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_owner_greenhouses"}]}